@using Frontendtest.Objects
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authentication
@using System.Security.Claims
@inject HttpClient Http



<div class="container">
    <div class="row">
        @if (Load == false)
        {
            <div class="col-md-7 mx-auto">
                <div class="card bg-white mt-5">
                    <div class="card-body text-center">
                        <p>laden...</p>

                    </div>
                </div>
            </div>
        }
        else{
            if (messages.Count() == 0)
            {
            <div class="col-md-7 mx-auto">
                <div class="card bg-white mt-5">
                    <div class="card-body text-center">
                        <p>Je hebt nog geen berichten :(</p>
                    </div>
                </div>
            </div>
            }
            else{
                foreach (MessageDTO message in messages)
                {
                    <NewsMessage Message="@message"  />
                }
            }
        }
    </div>
    <div><p>&nbsp;</p></div>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private List<MessageDTO> messages = new();
    private List<Claim> roles;
    private bool Load = false;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateTask;

        List<MessageDTO>?  allmessages = await Http.GetFromJsonAsync<List<MessageDTO>>("api/Message");
        roles = state.User.Claims.Where(c => c.Type == ClaimTypes.Role).ToList();
        foreach (Claim role in roles)
        {
            messages.AddRange(allmessages.Where(m => m.Group == role.Value));
        }
        messages = messages.OrderByDescending((m => m.Date)).ToList();
        await base.OnInitializedAsync();
        Load = true;
    }


}

